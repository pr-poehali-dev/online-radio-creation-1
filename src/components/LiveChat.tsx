import React, { useState, useEffect, useRef } from "react";
import Icon from "@/components/ui/icon";

interface Message {
  id: number;
  user: string;
  text: string;
  timestamp: Date;
  emoji?: string;
}

const LiveChat = () => {
  const [messages, setMessages] = useState<Message[]>([]);
  const [newMessage, setNewMessage] = useState("");
  const [currentUser] = useState(
    `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å${Math.floor(Math.random() * 1000)}`,
  );
  const [onlineUsers, setOnlineUsers] = useState(10000);
  const messagesEndRef = useRef<HTMLDivElement>(null);

  const sampleMessages = [
    {
      user: "–î–º–∏—Ç—Ä–∏–π –ö–æ–∑–ª–æ–≤",
      text: "–ö–∞–∫–∞—è –∫–ª–∞—Å—Å–Ω–∞—è –ø–µ—Å–Ω—è –∏–≥—Ä–∞–µ—Ç!",
      emoji: "üéµ",
    },
    {
      user: "–ï–ª–µ–Ω–∞ –ü–µ—Ç—Ä–æ–≤–∞",
      text: "–ü—Ä–∏–≤–µ—Ç –≤—Å–µ–º –≤ —á–∞—Ç–µ! –ö–∞–∫ –¥–µ–ª–∞?",
      emoji: "üëã",
    },
    {
      user: "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –°–º–∏—Ä–Ω–æ–≤",
      text: "–ú–æ–∂–Ω–æ –∑–∞–∫–∞–∑–∞—Ç—å —á—Ç–æ-—Ç–æ –∏–∑ —Ä–æ–∫–∞?",
      emoji: "ü§ò",
    },
    {
      user: "–ê–Ω–Ω–∞ –ò–≤–∞–Ω–æ–≤–∞",
      text: "–≠—Ç–∞ –º—É–∑—ã–∫–∞ –ø–æ–¥–Ω–∏–º–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ!",
      emoji: "üíÉ",
    },
    {
      user: "–ü–µ—Ç—Ä –°–æ–∫–æ–ª–æ–≤",
      text: "–û—Ç–ª–∏—á–Ω–æ–µ —Ä–∞–¥–∏–æ, —Å–ª—É—à–∞—é –∫–∞–∂–¥—ã–π –¥–µ–Ω—å",
      emoji: "‚ù§Ô∏è",
    },
    { user: "–ú–∞—Ä–∏—è –í–æ–ª–∫–æ–≤–∞", text: "–ï—Å—Ç—å –∫—Ç–æ –∏–∑ –ú–æ—Å–∫–≤—ã –≤ —á–∞—Ç–µ?", emoji: "üèôÔ∏è" },
    { user: "–ò–≥–æ—Ä—å –ú–æ—Ä–æ–∑–æ–≤", text: "–≠—Ç–æ—Ç —Ç—Ä–µ–∫ –ø—Ä–æ—Å—Ç–æ –æ–≥–æ–Ω—å!", emoji: "üî•" },
    {
      user: "–°–æ—Ñ–∏—è –ö—É–∑–Ω–µ—Ü–æ–≤–∞",
      text: "–°–ø–∞—Å–∏–±–æ –∑–∞ —Ç–∞–∫—É—é –∞—Ç–º–æ—Å—Ñ–µ—Ä—É!",
      emoji: "üôè",
    },
    {
      user: "–ú–∞–∫—Å–∏–º –ù–æ–≤–∏–∫–æ–≤",
      text: "–°–ª—É—à–∞—é —É–∂–µ —Ç—Ä–µ—Ç–∏–π —á–∞—Å –ø–æ–¥—Ä—è–¥",
      emoji: "üòä",
    },
    {
      user: "–û–ª—å–≥–∞ –§–µ–¥–æ—Ä–æ–≤–∞",
      text: "–ü–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è? –Ø –∏–∑ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–∞",
      emoji: "üòò",
    },
    {
      user: "–ê—Ä—Ç–µ–º –õ–µ–±–µ–¥–µ–≤",
      text: "–ü—Ä–∏–≤–µ—Ç –û–ª—è! –¢–æ–∂–µ –ª—é–±–ª—é —Ö–æ—Ä–æ—à—É—é –º—É–∑—ã–∫—É",
      emoji: "üòé",
    },
    {
      user: "–¢–∞—Ç—å—è–Ω–∞ –û—Ä–ª–æ–≤–∞",
      text: "–ö–∞–∫–∞—è —Å–µ–π—á–∞—Å –ø–µ—Å–Ω—è? –û—á–µ–Ω—å –Ω—Ä–∞–≤–∏—Ç—Å—è!",
      emoji: "üé∂",
    },
    {
      user: "–°–µ—Ä–≥–µ–π –ü–∞–≤–ª–æ–≤",
      text: "–ò–¥–µ–∞–ª—å–Ω–æ –¥–ª—è —Ä–∞–±–æ—Ç—ã –ø–æ–¥—Ö–æ–¥–∏—Ç",
      emoji: "üíª",
    },
    {
      user: "–ù–∞—Ç–∞–ª—å—è –ë–µ–ª–æ–≤–∞",
      text: "–ê —Ç–∞–Ω—Ü–µ–≤–∞–ª—å–Ω–æ–π –º—É–∑—ã–∫–∏ –±—É–¥–µ—Ç?",
      emoji: "üï∫",
    },
    {
      user: "–í–ª–∞–¥–∏–º–∏—Ä –ó–∞–π—Ü–µ–≤",
      text: "–≠—Ç–æ —Ä–∞–¥–∏–æ - –Ω–∞—Å—Ç–æ—è—â–∞—è –Ω–∞—Ö–æ–¥–∫–∞!",
      emoji: "‚ú®",
    },
    { user: "–Æ–ª–∏—è –†–æ–º–∞–Ω–æ–≤–∞", text: "–û—Ç–ª–∏—á–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∑–≤—É–∫–∞", emoji: "üéß" },
    {
      user: "–ê–Ω–¥—Ä–µ–π –í–∞—Å–∏–ª—å–µ–≤",
      text: "–ú–æ–∂–Ω–æ –∑–∞–∫–∞–∑–∞—Ç—å –∫–ª–∞—Å—Å–∏—á–µ—Å–∫—É—é –º—É–∑—ã–∫—É?",
      emoji: "üéª",
    },
    {
      user: "–ï–∫–∞—Ç–µ—Ä–∏–Ω–∞ –ñ—É–∫–æ–≤–∞",
      text: "–°–ª—É—à–∞—é –≤–æ –≤—Ä–µ–º—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏",
      emoji: "üí™",
    },
    { user: "–ù–∏–∫–∏—Ç–∞ –ú–µ–¥–≤–µ–¥–µ–≤", text: "–ö—Ä—É—Ç–æ–π –ø–ª–µ–π–ª–∏—Å—Ç —Å–µ–≥–æ–¥–Ω—è", emoji: "üî•" },
    { user: "–í–∏–∫—Ç–æ—Ä–∏—è –ó–∞—Ö–∞—Ä–æ–≤–∞", text: "–ü—Ä–∏–≤–µ—Ç –∏–∑ –ö–∞–∑–∞–Ω–∏!", emoji: "üëã" },
    { user: "–†–æ–º–∞–Ω –¢–∏—Ö–æ–Ω–æ–≤", text: "–≠—Ç–∞ –ø–µ—Å–Ω—è –Ω–∞–ø–æ–º–∏–Ω–∞–µ—Ç —é–Ω–æ—Å—Ç—å", emoji: "üåü" },
    {
      user: "–ê–ª–∏—Å–∞ –ú–∞–∫–∞—Ä–æ–≤–∞",
      text: "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–ª–∏—á–Ω–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ",
      emoji: "‚òÄÔ∏è",
    },
    { user: "–ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω –ü–æ–ø–æ–≤", text: "–°–ª—É—à–∞—é –∫–∞–∂–¥—ã–π –≤–µ—á–µ—Ä", emoji: "üåô" },
    {
      user: "–ü–æ–ª–∏–Ω–∞ –ì—Ä–∏–≥–æ—Ä—å–µ–≤–∞",
      text: "–ö–∞–∫–∞—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–Ω–∞—è –º—É–∑—ã–∫–∞",
      emoji: "üí´",
    },
    {
      user: "–î–µ–Ω–∏—Å –°—Ç–µ–ø–∞–Ω–æ–≤",
      text: "–ú–æ–∂–Ω–æ –±–æ–ª—å—à–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ö–∏—Ç–æ–≤?",
      emoji: "üé§",
    },
  ];

  const emojis = [
    "üòä",
    "üéµ",
    "‚ù§Ô∏è",
    "üî•",
    "üëã",
    "üé∂",
    "üíÉ",
    "ü§ò",
    "‚ú®",
    "üôè",
    "üòé",
    "üíª",
    "üï∫",
    "üòò",
  ];

  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  useEffect(() => {
    const savedMessages = localStorage.getItem("radioNoumi_chatMessages");
    if (savedMessages) {
      const parsedMessages = JSON.parse(savedMessages).map((msg: any) => ({
        ...msg,
        timestamp: new Date(msg.timestamp),
      }));
      setMessages(parsedMessages);
    }
  }, []);

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ localStorage –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
  useEffect(() => {
    if (messages.length > 0) {
      localStorage.setItem("radioNoumi_chatMessages", JSON.stringify(messages));
    }
  }, [messages]);

  // –£–ø—Ä–∞–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–æ–º –æ–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  useEffect(() => {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const savedUsers = localStorage.getItem("radioNoumi_onlineUsers");
    const savedTimestamp = localStorage.getItem("radioNoumi_lastUpdate");

    if (savedUsers && savedTimestamp) {
      const lastUpdate = new Date(savedTimestamp);
      const now = new Date();
      const hoursPassed = Math.floor(
        (now.getTime() - lastUpdate.getTime()) / (1000 * 60 * 60),
      );

      if (hoursPassed > 0) {
        const newUserCount =
          parseInt(savedUsers) +
          hoursPassed * Math.floor(Math.random() * 50 + 20);
        setOnlineUsers(newUserCount);
        localStorage.setItem("radioNoumi_onlineUsers", newUserCount.toString());
        localStorage.setItem("radioNoumi_lastUpdate", now.toISOString());
      } else {
        setOnlineUsers(parseInt(savedUsers));
      }
    } else {
      // –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ - —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º 10,000
      setOnlineUsers(10000);
      localStorage.setItem("radioNoumi_onlineUsers", "10000");
      localStorage.setItem("radioNoumi_lastUpdate", new Date().toISOString());
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π —á–∞—Å
    const interval = setInterval(() => {
      setOnlineUsers((prev) => {
        const newCount = prev + Math.floor(Math.random() * 50 + 20);
        localStorage.setItem("radioNoumi_onlineUsers", newCount.toString());
        localStorage.setItem("radioNoumi_lastUpdate", new Date().toISOString());
        return newCount;
      });
    }, 3600000); // 1 —á–∞—Å = 3,600,000 –º—Å

    return () => clearInterval(interval);
  }, []);

  useEffect(() => {
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
    const interval = setInterval(
      () => {
        const randomMessage =
          sampleMessages[Math.floor(Math.random() * sampleMessages.length)];

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–æ –ª–∏ —Ç–∞–∫–æ–≥–æ –∂–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 10
        const recentMessages = messages.slice(-10);
        const isDuplicate = recentMessages.some(
          (msg) =>
            msg.text === randomMessage.text && msg.user === randomMessage.user,
        );

        if (!isDuplicate) {
          const newMsg: Message = {
            id: Date.now() + Math.random(),
            user: randomMessage.user,
            text: randomMessage.text,
            timestamp: new Date(),
            emoji: randomMessage.emoji,
          };
          setMessages((prev) => [...prev, newMsg]);
        }
      },
      3000 + Math.random() * 5000,
    );

    return () => clearInterval(interval);
  }, [messages]);

  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  }, [messages]);

  const sendMessage = () => {
    if (newMessage.trim()) {
      const msg: Message = {
        id: Date.now(),
        user: currentUser,
        text: newMessage,
        timestamp: new Date(),
      };
      setMessages((prev) => [...prev, msg]);
      setNewMessage("");
    }
  };

  const addEmoji = (emoji: string) => {
    setNewMessage((prev) => prev + emoji);
  };

  return (
    <div className="bg-white/10 backdrop-blur-sm rounded-lg p-4 h-96 flex flex-col">
      <div className="flex items-center justify-between mb-3">
        <div className="flex items-center space-x-2">
          <Icon name="MessageCircle" size={20} className="text-purple-300" />
          <h3 className="text-lg font-semibold text-white">–ñ–∏–≤–æ–π —á–∞—Ç</h3>
          <div className="w-2 h-2 bg-green-400 rounded-full animate-pulse"></div>
        </div>
        <div className="flex items-center space-x-2 text-green-400">
          <Icon name="Users" size={16} />
          <span className="text-sm font-medium">
            {onlineUsers.toLocaleString()}
          </span>
        </div>
      </div>

      <div className="flex-1 overflow-y-auto space-y-2 mb-3">
        {messages.map((message) => (
          <div key={message.id} className="text-sm">
            <span className="text-purple-300 font-medium">{message.user}:</span>
            <span className="text-white ml-2">{message.text}</span>
          </div>
        ))}
        <div ref={messagesEndRef} />
      </div>

      <div className="flex space-x-2 mb-2">
        {emojis.slice(0, 8).map((emoji) => (
          <button
            key={emoji}
            onClick={() => addEmoji(emoji)}
            className="text-lg hover:scale-110 transition-transform"
          >
            {emoji}
          </button>
        ))}
      </div>

      <div className="flex space-x-2">
        <input
          type="text"
          value={newMessage}
          onChange={(e) => setNewMessage(e.target.value)}
          onKeyPress={(e) => e.key === "Enter" && sendMessage()}
          placeholder="–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..."
          className="flex-1 px-3 py-2 bg-white/20 rounded-lg text-white placeholder-purple-200 border border-white/20 focus:border-purple-400 focus:outline-none"
        />
        <button
          onClick={sendMessage}
          className="px-4 py-2 bg-purple-500 text-white rounded-lg hover:bg-purple-600 transition-colors"
        >
          <Icon name="Send" size={16} />
        </button>
      </div>
    </div>
  );
};

export default LiveChat;
